name: Rust project CI & Release

on:
  push:
    branches:
      - master
      - dev

jobs:
  build:
    name: Build, Test and Release
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: ubuntu-latest
            rust_target: 'x86_64-unknown-linux-gnu'
            arch: 'x86_64'
          - os: windows-latest
            rust_target: 'x86_64-pc-windows-gnu'
            arch: 'x86_64'
          - os: macOS-latest
            rust_target: 'x86_64-apple-darwin'
            arch: 'x86_64'
          - os: ubuntu-latest
            rust_target: 'aarch64-unknown-linux-gnu'
            arch: 'ARM'
          - os: macOS-latest
            rust_target: 'aarch64-apple-darwin'
            arch: 'ARM'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.config.rust_target }}
          override: true
          components: rustfmt, clippy

      - name: Install cross-compilation tools for Linux ARM
        if: matrix.config.arch == 'ARM' && matrix.config.os == 'ubuntu-latest'
        run: sudo dpkg --add-architecture arm64 && sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu libssl-dev:arm64

      - name: Set cross-compilation environment variables for Linux ARM
        if: matrix.config.arch == 'ARM' && matrix.config.os == 'ubuntu-latest'
        run: |
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Run Tests
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Build Project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.config.rust_target }}
        env:
          CARGO_BUILD_RUSTFLAGS: -C target-feature=+crt-static

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # One artifact per target
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/${{ matrix.config.rust_target }}/release/your_project_name
          asset_name: your_project_name-${{ matrix.config.rust_target }}
          asset_content_type: application/octet-stream
