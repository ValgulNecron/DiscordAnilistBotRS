pub struct LevelSystem {}

impl LevelSystem {
    pub const LEVELS: [(u32, f64, f64); 50] = [
        (1, 0.0, 200.0),
        (2, 200.0, 500.0),
        (3, 500.0, 900.0),
        (4, 900.0, 1500.0),
        (5, 1500.0, 2300.0),
        (6, 2300.0, 4000.0),
        (7, 4000.0, 6000.0),
        (8, 6000.0, 9000.0),
        (9, 9000.0, 15000.0),
        (10, 15000.0, 25000.0),
        (11, 25000.0, 45000.0),
        (12, 45000.0, 75000.0),
        (13, 75000.0, 125000.0),
        (14, 125000.0, 210000.0),
        (15, 210000.0, 350000.0),
        (16, 350000.0, 580000.0),
        (17, 580000.0, 960000.0),
        (18, 960000.0, 1590000.0),
        (19, 1590000.0, 2640000.0),
        (20, 2640000.0, 4380000.0),
        (21, 4380000.0, 7260000.0),
        (22, 7260000.0, 12030000.0),
        (23, 12030000.0, 19980000.0),
        (24, 19980000.0, 33210000.0),
        (25, 33210000.0, 55140000.0),
        (26, 55140000.0, 91570000.0),
        (27, 91570000.0, 151890000.0),
        (28, 151890000.0, 252090000.0),
        (29, 252090000.0, 418860000.0),
        (30, 418860000.0, 695040000.0),
        (31, 695040000.0, 1153570000.0),
        (32, 1153570000.0, 1912143000.0),
        (33, 1912143000.0, 3173562000.0),
        (34, 3173562000.0, 5263667000.0),
        (35, 5263667000.0, 8719355000.0),
        (36, 8719355000.0, 14447949000.0),
        (37, 14447949000.0, 23943226000.0),
        (38, 23943226000.0, 39677890000.0),
        (39, 39677890000.0, 65771180000.0),
        (40, 65771180000.0, 109071590000.0),
        (41, 109071590000.0, 180771020000.0),
        (42, 180771020000.0, 299431620000.0),
        (43, 299431620000.0, 496445700000.0),
        (44, 496445700000.0, 822313460000.0),
        (45, 822313460000.0, 1363480210000.0),
        (46, 1363480210000.0, 2262168670000.0),
        (47, 2262168670000.0, 3749843330000.0),
        (48, 3749843330000.0, 6206160260000.0),
        (49, 6206160260000.0, 10277289980000.0),
        (50, 10277289980000.0, 0.0),
    ];

    pub fn get_level(xp: f64) -> Option<(u32, f64, f64)> {
        for &(level, required_xp, next_level_required_xp) in Self::LEVELS.iter().rev() {
            if xp >= required_xp {
                let level_progress = xp - required_xp;
                let level_progress_total = next_level_required_xp - required_xp;
                return Some((level, level_progress, level_progress_total));
            }
        }

        None
    }
}
