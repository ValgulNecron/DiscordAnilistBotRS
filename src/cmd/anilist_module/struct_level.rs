pub struct LevelSystem {}

impl LevelSystem {
    pub const LEVELS: [(u32, f64, f64); 51] = [
        (0, 0.0, 20.0),
        (1, 20.0, 40.0),
        (2, 40.0, 60.0),
        (3, 60.0, 80.0),
        (4, 80.0, 100.0),
        (5, 100.0, 130.0),
        (6, 130.0, 160.0),
        (7, 160.0, 190.0),
        (8, 190.0, 220.0),
        (9, 220.0, 250.0),
        (10, 250.0, 280.0),
        (11, 280.0, 310.0),
        (12, 310.0, 340.0),
        (13, 340.0, 370.0),
        (14, 370.0, 400.0),
        (15, 9360.0, 13860.0),
        (16, 13860.0, 20460.0),
        (17, 20460.0, 30160.0),
        (18, 30160.0, 44360.0),
        (19, 44360.0, 65160.0),
        (20, 65160.0, 95560.0),
        (21, 95560.0, 140160.0),
        (22, 140160.0, 206160.0),
        (23, 206160.0, 303160.0),
        (24, 303160.0, 447160.0),
        (25, 447160.0, 657160.0),
        (26, 657160.0, 969160.0),
        (27, 969160.0, 1426160.0),
        (28, 1426160.0, 2096160.0),
        (29, 2096160.0, 3076160.0),
        (30, 3076160.0, 4526160.0),
        (31, 4526160.0, 6626160.0),
        (32, 6626160.0, 9746160.0),
        (33, 9746160.0, 14316160.0),
        (34, 14316160.0, 21016160.0),
        (35, 21016160.0, 30816160.0),
        (36, 30816160.0, 45316160.0),
        (37, 45316160.0, 66316160.0),
        (38, 66316160.0, 97516160.0),
        (39, 97516160.0, 143516160.0),
        (40, 143516160.0, 210516160.0),
        (41, 210516160.0, 308516160.0),
        (42, 308516160.0, 453516160.0),
        (43, 453516160.0, 663516160.0),
        (44, 663516160.0, 975516160.0),
        (45, 975516160.0, 1437516160.0),
        (46, 1437516160.0, 2107516160.0),
        (47, 2107516160.0, 3087516160.0),
        (48, 3087516160.0, 4537516160.0),
        (49, 4537516160.0, 6637516160.0),
        (50, 6637516160.0, 9757516160.0),
    ];

    pub fn get_level(xp: f64) -> Option<(u32, f64, f64)> {
        for &(level, required_xp, next_level_required_xp) in Self::LEVELS.iter().rev() {
            if xp >= required_xp {
                let level_progress = xp - required_xp;
                let level_progress_total = next_level_required_xp - required_xp;
                return Some((level, level_progress, level_progress_total));
            }
        }

        None
    }
}
